// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_meta.proto

#include "rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tinyRPC {
namespace rpc {
PROTOBUF_CONSTEXPR RpcRequestMeta::RpcRequestMeta(
    ::_pbi::ConstantInitialized)
  : method_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tracing_context_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_id_(0u)
  , timeout_(0u)
  , acceptable_compression_algorithms_(uint64_t{0u}){}
struct RpcRequestMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcRequestMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcRequestMetaDefaultTypeInternal() {}
  union {
    RpcRequestMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
PROTOBUF_CONSTEXPR RpcResponseMeta::RpcResponseMeta(
    ::_pbi::ConstantInitialized)
  : description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0)
  , trace_forcibly_sampled_(false){}
struct RpcResponseMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcResponseMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcResponseMetaDefaultTypeInternal() {}
  union {
    RpcResponseMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
PROTOBUF_CONSTEXPR RpcMeta::RpcMeta(
    ::_pbi::ConstantInitialized)
  : request_meta_(nullptr)
  , response_meta_(nullptr)
  , correlation_id_(uint64_t{0u})
  , flags_(uint64_t{0u})
  , method_type_(0)

  , compression_algorithm_(0)

  , attachment_compressed_(false){}
struct RpcMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMetaDefaultTypeInternal() {}
  union {
    RpcMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
}  // namespace rpc
}  // namespace tinyRPC
static ::_pb::Metadata file_level_metadata_rpc_5fmeta_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rpc_5fmeta_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5fmeta_2eproto = nullptr;

const uint32_t TableStruct_rpc_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcRequestMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcRequestMeta, method_name_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcRequestMeta, request_id_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcRequestMeta, timeout_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcRequestMeta, tracing_context_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcRequestMeta, acceptable_compression_algorithms_),
  0,
  2,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcResponseMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcResponseMeta, status_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcResponseMeta, description_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcResponseMeta, trace_forcibly_sampled_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, method_type_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, flags_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, compression_algorithm_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, attachment_compressed_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, request_meta_),
  PROTOBUF_FIELD_OFFSET(::tinyRPC::rpc::RpcMeta, response_meta_),
  2,
  4,
  3,
  5,
  6,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::tinyRPC::rpc::RpcRequestMeta)},
  { 16, 25, -1, sizeof(::tinyRPC::rpc::RpcResponseMeta)},
  { 28, 41, -1, sizeof(::tinyRPC::rpc::RpcMeta)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tinyRPC::rpc::_RpcRequestMeta_default_instance_._instance,
  &::tinyRPC::rpc::_RpcResponseMeta_default_instance_._instance,
  &::tinyRPC::rpc::_RpcMeta_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5fmeta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016rpc_meta.proto\022\013tinyRPC.rpc\"\216\001\n\016RpcReq"
  "uestMeta\022\023\n\013method_name\030\002 \002(\t\022\022\n\nrequest"
  "_id\030\003 \001(\r\022\017\n\007timeout\030\004 \001(\r\022\027\n\017tracing_co"
  "ntext\030\005 \001(\014\022)\n!acceptable_compression_al"
  "gorithms\030\006 \001(\004\"V\n\017RpcResponseMeta\022\016\n\006sta"
  "tus\030\001 \002(\005\022\023\n\013description\030\002 \001(\t\022\036\n\026trace_"
  "forcibly_sampled\030\003 \001(\010\"\247\002\n\007RpcMeta\022\026\n\016co"
  "rrelation_id\030\001 \002(\004\022,\n\013method_type\030\007 \002(\0162"
  "\027.tinyRPC.rpc.MethodType\022\r\n\005flags\030\010 \001(\004\022"
  "@\n\025compression_algorithm\030\t \001(\0162!.tinyRPC"
  ".rpc.CompressionAlgorithm\022\035\n\025attachment_"
  "compressed\030\n \001(\010\0221\n\014request_meta\030\005 \001(\0132\033"
  ".tinyRPC.rpc.RpcRequestMeta\0223\n\rresponse_"
  "meta\030\006 \001(\0132\034.tinyRPC.rpc.RpcResponseMeta"
  "*\237\005\n\006Status\022\022\n\016STATUS_SUCCESS\020\000\022\033\n\027STATU"
  "S_CHANNEL_SHUTDOWN\020\001\022\032\n\026STATUS_FAIL_TO_C"
  "ONNECT\020\002\022\034\n\030STATUS_SERIALIZE_REQUEST\020\004\022\030"
  "\n\024STATUS_PARSE_REQUEST\020\005\022\035\n\031STATUS_SERIA"
  "LIZE_RESPONSE\020\006\022\031\n\025STATUS_PARSE_RESPONSE"
  "\020\007\022\036\n\032STATUS_INVALID_METHOD_NAME\020\010\022 \n\034ST"
  "ATUS_INVALID_TRANSFER_MODE\020\014\022\035\n\031STATUS_F"
  "ROM_USER_FEEDBACK\020\r\022\031\n\025STATUS_OUT_OF_SER"
  "VICE\020\016\022\024\n\020STATUS_GET_ROUTE\020\017\022!\n\035STATUS_G"
  "ET_ROUTE_ALL_DISABLED\020\021\022\024\n\020STATUS_FROM_U"
  "SER\020d\022\022\n\016STATUS_TIMEOUT\020\003\022\025\n\021STATUS_OVER"
  "LOADED\020\013\022\034\n\030STATUS_SERVICE_NOT_FOUND\020\t\022\033"
  "\n\027STATUS_METHOD_NOT_FOUND\020\n\022\022\n\016STATUS_NO"
  "_PEER\020\020\022\021\n\rSTATUS_FAILED\020c\022\030\n\024STATUS_NOT"
  "_SUPPORTED\020e\022\031\n\025STATUS_MALFORMED_DATA\020f\022"
  "\032\n\026STATUS_INVALID_CHANNEL\020g\022\023\n\017STATUS_IO"
  "_ERROR\020h\022\030\n\023STATUS_RESERVED_MAX\020\350\007*=\n\nMe"
  "thodType\022\027\n\023METHOD_TYPE_UNKNOWN\020\000\022\026\n\022MET"
  "HOD_TYPE_SINGLE\020\001*G\n\014MessageFlags\022\031\n\025MES"
  "SAGE_FLAGS_UNKNOWN\020\000\022\034\n\030MESSAGE_FLAGS_NO"
  "_PAYLOAD\020\004*\340\001\n\024CompressionAlgorithm\022!\n\035C"
  "OMPRESSION_ALGORITHM_UNKNOWN\020\000\022\036\n\032COMPRE"
  "SSION_ALGORITHM_NONE\020\001\022\036\n\032COMPRESSION_AL"
  "GORITHM_GZIP\020\002\022#\n\037COMPRESSION_ALGORITHM_"
  "LZ4_FRAME\020\003\022 \n\034COMPRESSION_ALGORITHM_SNA"
  "PPY\020\004\022\036\n\032COMPRESSION_ALGORITHM_ZSTD\020\005"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5fmeta_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5fmeta_2eproto = {
    false, false, 1597, descriptor_table_protodef_rpc_5fmeta_2eproto,
    "rpc_meta.proto",
    &descriptor_table_rpc_5fmeta_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_rpc_5fmeta_2eproto::offsets,
    file_level_metadata_rpc_5fmeta_2eproto, file_level_enum_descriptors_rpc_5fmeta_2eproto,
    file_level_service_descriptors_rpc_5fmeta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5fmeta_2eproto_getter() {
  return &descriptor_table_rpc_5fmeta_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5fmeta_2eproto(&descriptor_table_rpc_5fmeta_2eproto);
namespace tinyRPC {
namespace rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmeta_2eproto);
  return file_level_enum_descriptors_rpc_5fmeta_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MethodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmeta_2eproto);
  return file_level_enum_descriptors_rpc_5fmeta_2eproto[1];
}
bool MethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmeta_2eproto);
  return file_level_enum_descriptors_rpc_5fmeta_2eproto[2];
}
bool MessageFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_5fmeta_2eproto);
  return file_level_enum_descriptors_rpc_5fmeta_2eproto[3];
}
bool CompressionAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RpcRequestMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcRequestMeta>()._has_bits_);
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tracing_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_acceptable_compression_algorithms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RpcRequestMeta::RpcRequestMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tinyRPC.rpc.RpcRequestMeta)
}
RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    method_name_.Set(from._internal_method_name(), 
      GetArenaForAllocation());
  }
  tracing_context_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tracing_context_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tracing_context()) {
    tracing_context_.Set(from._internal_tracing_context(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_compression_algorithms_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(acceptable_compression_algorithms_));
  // @@protoc_insertion_point(copy_constructor:tinyRPC.rpc.RpcRequestMeta)
}

inline void RpcRequestMeta::SharedCtor() {
method_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tracing_context_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tracing_context_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceptable_compression_algorithms_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(acceptable_compression_algorithms_));
}

RpcRequestMeta::~RpcRequestMeta() {
  // @@protoc_insertion_point(destructor:tinyRPC.rpc.RpcRequestMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcRequestMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_name_.Destroy();
  tracing_context_.Destroy();
}

void RpcRequestMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tinyRPC.rpc.RpcRequestMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tracing_context_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceptable_compression_algorithms_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(acceptable_compression_algorithms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcRequestMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tinyRPC.rpc.RpcRequestMeta.method_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes tracing_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tracing_context();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 acceptable_compression_algorithms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_acceptable_compression_algorithms(&has_bits);
          acceptable_compression_algorithms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcRequestMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinyRPC.rpc.RpcRequestMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string method_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tinyRPC.rpc.RpcRequestMeta.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // optional uint32 request_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_request_id(), target);
  }

  // optional uint32 timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timeout(), target);
  }

  // optional bytes tracing_context = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tracing_context(), target);
  }

  // optional uint64 acceptable_compression_algorithms = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_acceptable_compression_algorithms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinyRPC.rpc.RpcRequestMeta)
  return target;
}

size_t RpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinyRPC.rpc.RpcRequestMeta)
  size_t total_size = 0;

  // required string method_name = 2;
  if (_internal_has_method_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional bytes tracing_context = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tracing_context());
    }

    // optional uint32 request_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
    }

    // optional uint32 timeout = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout());
    }

    // optional uint64 acceptable_compression_algorithms = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_acceptable_compression_algorithms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcRequestMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RpcRequestMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcRequestMeta::GetClassData() const { return &_class_data_; }

void RpcRequestMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcRequestMeta *>(to)->MergeFrom(
      static_cast<const RpcRequestMeta &>(from));
}


void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tinyRPC.rpc.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tracing_context(from._internal_tracing_context());
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      acceptable_compression_algorithms_ = from.acceptable_compression_algorithms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinyRPC.rpc.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RpcRequestMeta::InternalSwap(RpcRequestMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tracing_context_, lhs_arena,
      &other->tracing_context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcRequestMeta, acceptable_compression_algorithms_)
      + sizeof(RpcRequestMeta::acceptable_compression_algorithms_)
      - PROTOBUF_FIELD_OFFSET(RpcRequestMeta, request_id_)>(
          reinterpret_cast<char*>(&request_id_),
          reinterpret_cast<char*>(&other->request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcRequestMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmeta_2eproto_getter, &descriptor_table_rpc_5fmeta_2eproto_once,
      file_level_metadata_rpc_5fmeta_2eproto[0]);
}

// ===================================================================

class RpcResponseMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcResponseMeta>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trace_forcibly_sampled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

RpcResponseMeta::RpcResponseMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tinyRPC.rpc.RpcResponseMeta)
}
RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_forcibly_sampled_) -
    reinterpret_cast<char*>(&status_)) + sizeof(trace_forcibly_sampled_));
  // @@protoc_insertion_point(copy_constructor:tinyRPC.rpc.RpcResponseMeta)
}

inline void RpcResponseMeta::SharedCtor() {
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trace_forcibly_sampled_) -
    reinterpret_cast<char*>(&status_)) + sizeof(trace_forcibly_sampled_));
}

RpcResponseMeta::~RpcResponseMeta() {
  // @@protoc_insertion_point(destructor:tinyRPC.rpc.RpcResponseMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcResponseMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.Destroy();
}

void RpcResponseMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tinyRPC.rpc.RpcResponseMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_forcibly_sampled_) -
        reinterpret_cast<char*>(&status_)) + sizeof(trace_forcibly_sampled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcResponseMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tinyRPC.rpc.RpcResponseMeta.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool trace_forcibly_sampled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_trace_forcibly_sampled(&has_bits);
          trace_forcibly_sampled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcResponseMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinyRPC.rpc.RpcResponseMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tinyRPC.rpc.RpcResponseMeta.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional bool trace_forcibly_sampled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_trace_forcibly_sampled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinyRPC.rpc.RpcResponseMeta)
  return target;
}

size_t RpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinyRPC.rpc.RpcResponseMeta)
  size_t total_size = 0;

  // required int32 status = 1;
  if (_internal_has_status()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string description = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // optional bool trace_forcibly_sampled = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcResponseMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RpcResponseMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcResponseMeta::GetClassData() const { return &_class_data_; }

void RpcResponseMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcResponseMeta *>(to)->MergeFrom(
      static_cast<const RpcResponseMeta &>(from));
}


void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tinyRPC.rpc.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      trace_forcibly_sampled_ = from.trace_forcibly_sampled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinyRPC.rpc.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RpcResponseMeta::InternalSwap(RpcResponseMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcResponseMeta, trace_forcibly_sampled_)
      + sizeof(RpcResponseMeta::trace_forcibly_sampled_)
      - PROTOBUF_FIELD_OFFSET(RpcResponseMeta, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcResponseMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmeta_2eproto_getter, &descriptor_table_rpc_5fmeta_2eproto_once,
      file_level_metadata_rpc_5fmeta_2eproto[1]);
}

// ===================================================================

class RpcMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMeta>()._has_bits_);
  static void set_has_correlation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_method_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_compression_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attachment_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::tinyRPC::rpc::RpcRequestMeta& request_meta(const RpcMeta* msg);
  static void set_has_request_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tinyRPC::rpc::RpcResponseMeta& response_meta(const RpcMeta* msg);
  static void set_has_response_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000014) ^ 0x00000014) != 0;
  }
};

const ::tinyRPC::rpc::RpcRequestMeta&
RpcMeta::_Internal::request_meta(const RpcMeta* msg) {
  return *msg->request_meta_;
}
const ::tinyRPC::rpc::RpcResponseMeta&
RpcMeta::_Internal::response_meta(const RpcMeta* msg) {
  return *msg->response_meta_;
}
RpcMeta::RpcMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tinyRPC.rpc.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request_meta()) {
    request_meta_ = new ::tinyRPC::rpc::RpcRequestMeta(*from.request_meta_);
  } else {
    request_meta_ = nullptr;
  }
  if (from._internal_has_response_meta()) {
    response_meta_ = new ::tinyRPC::rpc::RpcResponseMeta(*from.response_meta_);
  } else {
    response_meta_ = nullptr;
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attachment_compressed_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_compressed_));
  // @@protoc_insertion_point(copy_constructor:tinyRPC.rpc.RpcMeta)
}

inline void RpcMeta::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_meta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attachment_compressed_) -
    reinterpret_cast<char*>(&request_meta_)) + sizeof(attachment_compressed_));
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:tinyRPC.rpc.RpcMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_meta_;
  if (this != internal_default_instance()) delete response_meta_;
}

void RpcMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tinyRPC.rpc.RpcMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(request_meta_ != nullptr);
      request_meta_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(response_meta_ != nullptr);
      response_meta_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&correlation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attachment_compressed_) -
        reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_correlation_id(&has_bits);
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .tinyRPC.rpc.MethodType method_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tinyRPC::rpc::MethodType_IsValid(val))) {
            _internal_set_method_type(static_cast<::tinyRPC::rpc::MethodType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tinyRPC::rpc::CompressionAlgorithm_IsValid(val))) {
            _internal_set_compression_algorithm(static_cast<::tinyRPC::rpc::CompressionAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool attachment_compressed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_attachment_compressed(&has_bits);
          attachment_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tinyRPC.rpc.RpcMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 correlation_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_correlation_id(), target);
  }

  // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::request_meta(this),
        _Internal::request_meta(this).GetCachedSize(), target, stream);
  }

  // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::response_meta(this),
        _Internal::response_meta(this).GetCachedSize(), target, stream);
  }

  // required .tinyRPC.rpc.MethodType method_type = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_method_type(), target);
  }

  // optional uint64 flags = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_flags(), target);
  }

  // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_compression_algorithm(), target);
  }

  // optional bool attachment_compressed = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_attachment_compressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinyRPC.rpc.RpcMeta)
  return target;
}

size_t RpcMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tinyRPC.rpc.RpcMeta)
  size_t total_size = 0;

  if (_internal_has_correlation_id()) {
    // required uint64 correlation_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_correlation_id());
  }

  if (_internal_has_method_type()) {
    // required .tinyRPC.rpc.MethodType method_type = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_method_type());
  }

  return total_size;
}
size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinyRPC.rpc.RpcMeta)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000014) ^ 0x00000014) == 0) {  // All required fields are present.
    // required uint64 correlation_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_correlation_id());

    // required .tinyRPC.rpc.MethodType method_type = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_method_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_meta_);
    }

    // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_meta_);
    }

  }
  // optional uint64 flags = 8;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_flags());
  }

  if (cached_has_bits & 0x00000060u) {
    // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_compression_algorithm());
    }

    // optional bool attachment_compressed = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RpcMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcMeta::GetClassData() const { return &_class_data_; }

void RpcMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RpcMeta *>(to)->MergeFrom(
      static_cast<const RpcMeta &>(from));
}


void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tinyRPC.rpc.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_request_meta()->::tinyRPC::rpc::RpcRequestMeta::MergeFrom(from._internal_request_meta());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_response_meta()->::tinyRPC::rpc::RpcResponseMeta::MergeFrom(from._internal_response_meta());
    }
    if (cached_has_bits & 0x00000004u) {
      correlation_id_ = from.correlation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      method_type_ = from.method_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      compression_algorithm_ = from.compression_algorithm_;
    }
    if (cached_has_bits & 0x00000040u) {
      attachment_compressed_ = from.attachment_compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinyRPC.rpc.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_request_meta()) {
    if (!request_meta_->IsInitialized()) return false;
  }
  if (_internal_has_response_meta()) {
    if (!response_meta_->IsInitialized()) return false;
  }
  return true;
}

void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMeta, attachment_compressed_)
      + sizeof(RpcMeta::attachment_compressed_)
      - PROTOBUF_FIELD_OFFSET(RpcMeta, request_meta_)>(
          reinterpret_cast<char*>(&request_meta_),
          reinterpret_cast<char*>(&other->request_meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fmeta_2eproto_getter, &descriptor_table_rpc_5fmeta_2eproto_once,
      file_level_metadata_rpc_5fmeta_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace tinyRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tinyRPC::rpc::RpcRequestMeta*
Arena::CreateMaybeMessage< ::tinyRPC::rpc::RpcRequestMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinyRPC::rpc::RpcRequestMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tinyRPC::rpc::RpcResponseMeta*
Arena::CreateMaybeMessage< ::tinyRPC::rpc::RpcResponseMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinyRPC::rpc::RpcResponseMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tinyRPC::rpc::RpcMeta*
Arena::CreateMaybeMessage< ::tinyRPC::rpc::RpcMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tinyRPC::rpc::RpcMeta >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
