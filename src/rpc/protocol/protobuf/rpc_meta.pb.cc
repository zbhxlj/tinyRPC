// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tinyRPC {
namespace rpc {
class RpcRequestMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcRequestMeta>
     _instance;
} _RpcRequestMeta_default_instance_;
class RpcResponseMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcResponseMeta>
     _instance;
} _RpcResponseMeta_default_instance_;
class RpcMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RpcMeta>
     _instance;
} _RpcMeta_default_instance_;

namespace protobuf_rpc_5fmeta_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, method_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, tracing_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestMeta, acceptable_compression_algorithms_),
  0,
  2,
  3,
  1,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcResponseMeta, trace_forcibly_sampled_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, correlation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, method_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, compression_algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, attachment_compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, request_meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMeta, response_meta_),
  2,
  4,
  3,
  5,
  6,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(RpcRequestMeta)},
  { 15, 23, sizeof(RpcResponseMeta)},
  { 26, 38, sizeof(RpcMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcRequestMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcResponseMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RpcMeta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rpc_meta.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RpcRequestMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcRequestMeta_default_instance_);_RpcResponseMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcResponseMeta_default_instance_);_RpcMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RpcMeta_default_instance_);_RpcMeta_default_instance_._instance.get_mutable()->request_meta_ = const_cast< ::tinyRPC::rpc::RpcRequestMeta*>(
      ::tinyRPC::rpc::RpcRequestMeta::internal_default_instance());
  _RpcMeta_default_instance_._instance.get_mutable()->response_meta_ = const_cast< ::tinyRPC::rpc::RpcResponseMeta*>(
      ::tinyRPC::rpc::RpcResponseMeta::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016rpc_meta.proto\022\013tinyRPC.rpc\"\216\001\n\016RpcReq"
      "uestMeta\022\023\n\013method_name\030\002 \002(\t\022\022\n\nrequest"
      "_id\030\003 \001(\r\022\017\n\007timeout\030\004 \001(\r\022\027\n\017tracing_co"
      "ntext\030\005 \001(\014\022)\n!acceptable_compression_al"
      "gorithms\030\006 \001(\004\"V\n\017RpcResponseMeta\022\016\n\006sta"
      "tus\030\001 \002(\005\022\023\n\013description\030\002 \001(\t\022\036\n\026trace_"
      "forcibly_sampled\030\003 \001(\010\"\247\002\n\007RpcMeta\022\026\n\016co"
      "rrelation_id\030\001 \002(\004\022,\n\013method_type\030\007 \002(\0162"
      "\027.tinyRPC.rpc.MethodType\022\r\n\005flags\030\010 \001(\004\022"
      "@\n\025compression_algorithm\030\t \001(\0162!.tinyRPC"
      ".rpc.CompressionAlgorithm\022\035\n\025attachment_"
      "compressed\030\n \001(\010\0221\n\014request_meta\030\005 \001(\0132\033"
      ".tinyRPC.rpc.RpcRequestMeta\0223\n\rresponse_"
      "meta\030\006 \001(\0132\034.tinyRPC.rpc.RpcResponseMeta"
      "*\237\005\n\006Status\022\022\n\016STATUS_SUCCESS\020\000\022\033\n\027STATU"
      "S_CHANNEL_SHUTDOWN\020\001\022\032\n\026STATUS_FAIL_TO_C"
      "ONNECT\020\002\022\034\n\030STATUS_SERIALIZE_REQUEST\020\004\022\030"
      "\n\024STATUS_PARSE_REQUEST\020\005\022\035\n\031STATUS_SERIA"
      "LIZE_RESPONSE\020\006\022\031\n\025STATUS_PARSE_RESPONSE"
      "\020\007\022\036\n\032STATUS_INVALID_METHOD_NAME\020\010\022 \n\034ST"
      "ATUS_INVALID_TRANSFER_MODE\020\014\022\035\n\031STATUS_F"
      "ROM_USER_FEEDBACK\020\r\022\031\n\025STATUS_OUT_OF_SER"
      "VICE\020\016\022\024\n\020STATUS_GET_ROUTE\020\017\022!\n\035STATUS_G"
      "ET_ROUTE_ALL_DISABLED\020\021\022\024\n\020STATUS_FROM_U"
      "SER\020d\022\022\n\016STATUS_TIMEOUT\020\003\022\025\n\021STATUS_OVER"
      "LOADED\020\013\022\034\n\030STATUS_SERVICE_NOT_FOUND\020\t\022\033"
      "\n\027STATUS_METHOD_NOT_FOUND\020\n\022\022\n\016STATUS_NO"
      "_PEER\020\020\022\021\n\rSTATUS_FAILED\020c\022\030\n\024STATUS_NOT"
      "_SUPPORTED\020e\022\031\n\025STATUS_MALFORMED_DATA\020f\022"
      "\032\n\026STATUS_INVALID_CHANNEL\020g\022\023\n\017STATUS_IO"
      "_ERROR\020h\022\030\n\023STATUS_RESERVED_MAX\020\350\007*=\n\nMe"
      "thodType\022\027\n\023METHOD_TYPE_UNKNOWN\020\000\022\026\n\022MET"
      "HOD_TYPE_SINGLE\020\001*G\n\014MessageFlags\022\031\n\025MES"
      "SAGE_FLAGS_UNKNOWN\020\000\022\034\n\030MESSAGE_FLAGS_NO"
      "_PAYLOAD\020\004*\340\001\n\024CompressionAlgorithm\022!\n\035C"
      "OMPRESSION_ALGORITHM_UNKNOWN\020\000\022\036\n\032COMPRE"
      "SSION_ALGORITHM_NONE\020\001\022\036\n\032COMPRESSION_AL"
      "GORITHM_GZIP\020\002\022#\n\037COMPRESSION_ALGORITHM_"
      "LZ4_FRAME\020\003\022 \n\034COMPRESSION_ALGORITHM_SNA"
      "PPY\020\004\022\036\n\032COMPRESSION_ALGORITHM_ZSTD\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1597);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_meta.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rpc_5fmeta_2eproto

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_enum_descriptors[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MethodType_descriptor() {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_enum_descriptors[1];
}
bool MethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageFlags_descriptor() {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_enum_descriptors[2];
}
bool MessageFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressionAlgorithm_descriptor() {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_enum_descriptors[3];
}
bool CompressionAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcRequestMeta::kMethodNameFieldNumber;
const int RpcRequestMeta::kRequestIdFieldNumber;
const int RpcRequestMeta::kTimeoutFieldNumber;
const int RpcRequestMeta::kTracingContextFieldNumber;
const int RpcRequestMeta::kAcceptableCompressionAlgorithmsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcRequestMeta::RpcRequestMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fmeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinyRPC.rpc.RpcRequestMeta)
}
RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method_name()) {
    method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
  }
  tracing_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tracing_context()) {
    tracing_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracing_context_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_compression_algorithms_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(acceptable_compression_algorithms_));
  // @@protoc_insertion_point(copy_constructor:tinyRPC.rpc.RpcRequestMeta)
}

void RpcRequestMeta::SharedCtor() {
  _cached_size_ = 0;
  method_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracing_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptable_compression_algorithms_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(acceptable_compression_algorithms_));
}

RpcRequestMeta::~RpcRequestMeta() {
  // @@protoc_insertion_point(destructor:tinyRPC.rpc.RpcRequestMeta)
  SharedDtor();
}

void RpcRequestMeta::SharedDtor() {
  method_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracing_context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcRequestMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequestMeta::descriptor() {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcRequestMeta& RpcRequestMeta::default_instance() {
  protobuf_rpc_5fmeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcRequestMeta* RpcRequestMeta::New(::google::protobuf::Arena* arena) const {
  RpcRequestMeta* n = new RpcRequestMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tinyRPC.rpc.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!method_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*method_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!tracing_context_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tracing_context_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceptable_compression_algorithms_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(acceptable_compression_algorithms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinyRPC.rpc.RpcRequestMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method_name().data(), static_cast<int>(this->method_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tinyRPC.rpc.RpcRequestMeta.method_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes tracing_context = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tracing_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 acceptable_compression_algorithms = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_acceptable_compression_algorithms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acceptable_compression_algorithms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinyRPC.rpc.RpcRequestMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinyRPC.rpc.RpcRequestMeta)
  return false;
#undef DO_
}

void RpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinyRPC.rpc.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string method_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tinyRPC.rpc.RpcRequestMeta.method_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method_name(), output);
  }

  // optional uint32 request_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->request_id(), output);
  }

  // optional uint32 timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }

  // optional bytes tracing_context = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->tracing_context(), output);
  }

  // optional uint64 acceptable_compression_algorithms = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->acceptable_compression_algorithms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinyRPC.rpc.RpcRequestMeta)
}

::google::protobuf::uint8* RpcRequestMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tinyRPC.rpc.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string method_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method_name().data(), static_cast<int>(this->method_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tinyRPC.rpc.RpcRequestMeta.method_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method_name(), target);
  }

  // optional uint32 request_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->request_id(), target);
  }

  // optional uint32 timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }

  // optional bytes tracing_context = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->tracing_context(), target);
  }

  // optional uint64 acceptable_compression_algorithms = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->acceptable_compression_algorithms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinyRPC.rpc.RpcRequestMeta)
  return target;
}

size_t RpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinyRPC.rpc.RpcRequestMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string method_name = 2;
  if (has_method_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method_name());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional bytes tracing_context = 5;
    if (has_tracing_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tracing_context());
    }

    // optional uint32 request_id = 3;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional uint32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional uint64 acceptable_compression_algorithms = 6;
    if (has_acceptable_compression_algorithms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acceptable_compression_algorithms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tinyRPC.rpc.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcRequestMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcRequestMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tinyRPC.rpc.RpcRequestMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tinyRPC.rpc.RpcRequestMeta)
    MergeFrom(*source);
  }
}

void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tinyRPC.rpc.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_method_name();
      method_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tracing_context();
      tracing_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracing_context_);
    }
    if (cached_has_bits & 0x00000004u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      acceptable_compression_algorithms_ = from.acceptable_compression_algorithms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tinyRPC.rpc.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinyRPC.rpc.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RpcRequestMeta::Swap(RpcRequestMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcRequestMeta::InternalSwap(RpcRequestMeta* other) {
  using std::swap;
  method_name_.Swap(&other->method_name_);
  tracing_context_.Swap(&other->tracing_context_);
  swap(request_id_, other->request_id_);
  swap(timeout_, other->timeout_);
  swap(acceptable_compression_algorithms_, other->acceptable_compression_algorithms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcRequestMeta::GetMetadata() const {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcRequestMeta

// required string method_name = 2;
bool RpcRequestMeta::has_method_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RpcRequestMeta::set_has_method_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RpcRequestMeta::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RpcRequestMeta::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method_name();
}
const ::std::string& RpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.method_name)
  return method_name_.GetNoArena();
}
void RpcRequestMeta::set_method_name(const ::std::string& value) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.method_name)
}
#if LANG_CXX11
void RpcRequestMeta::set_method_name(::std::string&& value) {
  set_has_method_name();
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinyRPC.rpc.RpcRequestMeta.method_name)
}
#endif
void RpcRequestMeta::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyRPC.rpc.RpcRequestMeta.method_name)
}
void RpcRequestMeta::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyRPC.rpc.RpcRequestMeta.method_name)
}
::std::string* RpcRequestMeta::mutable_method_name() {
  set_has_method_name();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcRequestMeta.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcRequestMeta.method_name)
  clear_has_method_name();
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcRequestMeta::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    set_has_method_name();
  } else {
    clear_has_method_name();
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcRequestMeta.method_name)
}

// optional uint32 request_id = 3;
bool RpcRequestMeta::has_request_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RpcRequestMeta::set_has_request_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RpcRequestMeta::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RpcRequestMeta::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 RpcRequestMeta::request_id() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.request_id)
  return request_id_;
}
void RpcRequestMeta::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.request_id)
}

// optional uint32 timeout = 4;
bool RpcRequestMeta::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RpcRequestMeta::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void RpcRequestMeta::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void RpcRequestMeta::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
::google::protobuf::uint32 RpcRequestMeta::timeout() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.timeout)
  return timeout_;
}
void RpcRequestMeta::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.timeout)
}

// optional bytes tracing_context = 5;
bool RpcRequestMeta::has_tracing_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RpcRequestMeta::set_has_tracing_context() {
  _has_bits_[0] |= 0x00000002u;
}
void RpcRequestMeta::clear_has_tracing_context() {
  _has_bits_[0] &= ~0x00000002u;
}
void RpcRequestMeta::clear_tracing_context() {
  tracing_context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracing_context();
}
const ::std::string& RpcRequestMeta::tracing_context() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.tracing_context)
  return tracing_context_.GetNoArena();
}
void RpcRequestMeta::set_tracing_context(const ::std::string& value) {
  set_has_tracing_context();
  tracing_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.tracing_context)
}
#if LANG_CXX11
void RpcRequestMeta::set_tracing_context(::std::string&& value) {
  set_has_tracing_context();
  tracing_context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinyRPC.rpc.RpcRequestMeta.tracing_context)
}
#endif
void RpcRequestMeta::set_tracing_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tracing_context();
  tracing_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyRPC.rpc.RpcRequestMeta.tracing_context)
}
void RpcRequestMeta::set_tracing_context(const void* value, size_t size) {
  set_has_tracing_context();
  tracing_context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyRPC.rpc.RpcRequestMeta.tracing_context)
}
::std::string* RpcRequestMeta::mutable_tracing_context() {
  set_has_tracing_context();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcRequestMeta.tracing_context)
  return tracing_context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcRequestMeta::release_tracing_context() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcRequestMeta.tracing_context)
  clear_has_tracing_context();
  return tracing_context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcRequestMeta::set_allocated_tracing_context(::std::string* tracing_context) {
  if (tracing_context != NULL) {
    set_has_tracing_context();
  } else {
    clear_has_tracing_context();
  }
  tracing_context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracing_context);
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcRequestMeta.tracing_context)
}

// optional uint64 acceptable_compression_algorithms = 6;
bool RpcRequestMeta::has_acceptable_compression_algorithms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RpcRequestMeta::set_has_acceptable_compression_algorithms() {
  _has_bits_[0] |= 0x00000010u;
}
void RpcRequestMeta::clear_has_acceptable_compression_algorithms() {
  _has_bits_[0] &= ~0x00000010u;
}
void RpcRequestMeta::clear_acceptable_compression_algorithms() {
  acceptable_compression_algorithms_ = GOOGLE_ULONGLONG(0);
  clear_has_acceptable_compression_algorithms();
}
::google::protobuf::uint64 RpcRequestMeta::acceptable_compression_algorithms() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.acceptable_compression_algorithms)
  return acceptable_compression_algorithms_;
}
void RpcRequestMeta::set_acceptable_compression_algorithms(::google::protobuf::uint64 value) {
  set_has_acceptable_compression_algorithms();
  acceptable_compression_algorithms_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.acceptable_compression_algorithms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcResponseMeta::kStatusFieldNumber;
const int RpcResponseMeta::kDescriptionFieldNumber;
const int RpcResponseMeta::kTraceForciblySampledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcResponseMeta::RpcResponseMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fmeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinyRPC.rpc.RpcResponseMeta)
}
RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_forcibly_sampled_) -
    reinterpret_cast<char*>(&status_)) + sizeof(trace_forcibly_sampled_));
  // @@protoc_insertion_point(copy_constructor:tinyRPC.rpc.RpcResponseMeta)
}

void RpcResponseMeta::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_forcibly_sampled_) -
      reinterpret_cast<char*>(&status_)) + sizeof(trace_forcibly_sampled_));
}

RpcResponseMeta::~RpcResponseMeta() {
  // @@protoc_insertion_point(destructor:tinyRPC.rpc.RpcResponseMeta)
  SharedDtor();
}

void RpcResponseMeta::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RpcResponseMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResponseMeta::descriptor() {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcResponseMeta& RpcResponseMeta::default_instance() {
  protobuf_rpc_5fmeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcResponseMeta* RpcResponseMeta::New(::google::protobuf::Arena* arena) const {
  RpcResponseMeta* n = new RpcResponseMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tinyRPC.rpc.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trace_forcibly_sampled_) -
        reinterpret_cast<char*>(&status_)) + sizeof(trace_forcibly_sampled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinyRPC.rpc.RpcResponseMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tinyRPC.rpc.RpcResponseMeta.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trace_forcibly_sampled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_trace_forcibly_sampled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trace_forcibly_sampled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinyRPC.rpc.RpcResponseMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinyRPC.rpc.RpcResponseMeta)
  return false;
#undef DO_
}

void RpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinyRPC.rpc.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tinyRPC.rpc.RpcResponseMeta.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional bool trace_forcibly_sampled = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trace_forcibly_sampled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinyRPC.rpc.RpcResponseMeta)
}

::google::protobuf::uint8* RpcResponseMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tinyRPC.rpc.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tinyRPC.rpc.RpcResponseMeta.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional bool trace_forcibly_sampled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trace_forcibly_sampled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinyRPC.rpc.RpcResponseMeta)
  return target;
}

size_t RpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinyRPC.rpc.RpcResponseMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }
  // optional string description = 2;
  if (has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional bool trace_forcibly_sampled = 3;
  if (has_trace_forcibly_sampled()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tinyRPC.rpc.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcResponseMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcResponseMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tinyRPC.rpc.RpcResponseMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tinyRPC.rpc.RpcResponseMeta)
    MergeFrom(*source);
  }
}

void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tinyRPC.rpc.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      trace_forcibly_sampled_ = from.trace_forcibly_sampled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tinyRPC.rpc.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinyRPC.rpc.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void RpcResponseMeta::Swap(RpcResponseMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcResponseMeta::InternalSwap(RpcResponseMeta* other) {
  using std::swap;
  description_.Swap(&other->description_);
  swap(status_, other->status_);
  swap(trace_forcibly_sampled_, other->trace_forcibly_sampled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcResponseMeta::GetMetadata() const {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcResponseMeta

// required int32 status = 1;
bool RpcResponseMeta::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RpcResponseMeta::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void RpcResponseMeta::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void RpcResponseMeta::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 RpcResponseMeta::status() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcResponseMeta.status)
  return status_;
}
void RpcResponseMeta::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcResponseMeta.status)
}

// optional string description = 2;
bool RpcResponseMeta::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RpcResponseMeta::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void RpcResponseMeta::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void RpcResponseMeta::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& RpcResponseMeta::description() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcResponseMeta.description)
  return description_.GetNoArena();
}
void RpcResponseMeta::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcResponseMeta.description)
}
#if LANG_CXX11
void RpcResponseMeta::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tinyRPC.rpc.RpcResponseMeta.description)
}
#endif
void RpcResponseMeta::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tinyRPC.rpc.RpcResponseMeta.description)
}
void RpcResponseMeta::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tinyRPC.rpc.RpcResponseMeta.description)
}
::std::string* RpcResponseMeta::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcResponseMeta.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RpcResponseMeta::release_description() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcResponseMeta.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RpcResponseMeta::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcResponseMeta.description)
}

// optional bool trace_forcibly_sampled = 3;
bool RpcResponseMeta::has_trace_forcibly_sampled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RpcResponseMeta::set_has_trace_forcibly_sampled() {
  _has_bits_[0] |= 0x00000004u;
}
void RpcResponseMeta::clear_has_trace_forcibly_sampled() {
  _has_bits_[0] &= ~0x00000004u;
}
void RpcResponseMeta::clear_trace_forcibly_sampled() {
  trace_forcibly_sampled_ = false;
  clear_has_trace_forcibly_sampled();
}
bool RpcResponseMeta::trace_forcibly_sampled() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcResponseMeta.trace_forcibly_sampled)
  return trace_forcibly_sampled_;
}
void RpcResponseMeta::set_trace_forcibly_sampled(bool value) {
  set_has_trace_forcibly_sampled();
  trace_forcibly_sampled_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcResponseMeta.trace_forcibly_sampled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta::kCorrelationIdFieldNumber;
const int RpcMeta::kMethodTypeFieldNumber;
const int RpcMeta::kFlagsFieldNumber;
const int RpcMeta::kCompressionAlgorithmFieldNumber;
const int RpcMeta::kAttachmentCompressedFieldNumber;
const int RpcMeta::kRequestMetaFieldNumber;
const int RpcMeta::kResponseMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta::RpcMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_5fmeta_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tinyRPC.rpc.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request_meta()) {
    request_meta_ = new ::tinyRPC::rpc::RpcRequestMeta(*from.request_meta_);
  } else {
    request_meta_ = NULL;
  }
  if (from.has_response_meta()) {
    response_meta_ = new ::tinyRPC::rpc::RpcResponseMeta(*from.response_meta_);
  } else {
    response_meta_ = NULL;
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attachment_compressed_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_compressed_));
  // @@protoc_insertion_point(copy_constructor:tinyRPC.rpc.RpcMeta)
}

void RpcMeta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&request_meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attachment_compressed_) -
      reinterpret_cast<char*>(&request_meta_)) + sizeof(attachment_compressed_));
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:tinyRPC.rpc.RpcMeta)
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  if (this != internal_default_instance()) delete request_meta_;
  if (this != internal_default_instance()) delete response_meta_;
}

void RpcMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMeta::descriptor() {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcMeta& RpcMeta::default_instance() {
  protobuf_rpc_5fmeta_2eproto::InitDefaults();
  return *internal_default_instance();
}

RpcMeta* RpcMeta::New(::google::protobuf::Arena* arena) const {
  RpcMeta* n = new RpcMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tinyRPC.rpc.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(request_meta_ != NULL);
      request_meta_->::tinyRPC::rpc::RpcRequestMeta::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(response_meta_ != NULL);
      response_meta_->::tinyRPC::rpc::RpcResponseMeta::Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&correlation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attachment_compressed_) -
        reinterpret_cast<char*>(&correlation_id_)) + sizeof(attachment_compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tinyRPC.rpc.RpcMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 correlation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_correlation_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &correlation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .tinyRPC.rpc.MethodType method_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tinyRPC::rpc::MethodType_IsValid(value)) {
            set_method_type(static_cast< ::tinyRPC::rpc::MethodType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 flags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tinyRPC::rpc::CompressionAlgorithm_IsValid(value)) {
            set_compression_algorithm(static_cast< ::tinyRPC::rpc::CompressionAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool attachment_compressed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_attachment_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attachment_compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tinyRPC.rpc.RpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tinyRPC.rpc.RpcMeta)
  return false;
#undef DO_
}

void RpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tinyRPC.rpc.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 correlation_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->correlation_id(), output);
  }

  // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->request_meta_, output);
  }

  // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->response_meta_, output);
  }

  // required .tinyRPC.rpc.MethodType method_type = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->method_type(), output);
  }

  // optional uint64 flags = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->flags(), output);
  }

  // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->compression_algorithm(), output);
  }

  // optional bool attachment_compressed = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->attachment_compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tinyRPC.rpc.RpcMeta)
}

::google::protobuf::uint8* RpcMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tinyRPC.rpc.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 correlation_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->correlation_id(), target);
  }

  // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->request_meta_, deterministic, target);
  }

  // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->response_meta_, deterministic, target);
  }

  // required .tinyRPC.rpc.MethodType method_type = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->method_type(), target);
  }

  // optional uint64 flags = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->flags(), target);
  }

  // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->compression_algorithm(), target);
  }

  // optional bool attachment_compressed = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->attachment_compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tinyRPC.rpc.RpcMeta)
  return target;
}

size_t RpcMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tinyRPC.rpc.RpcMeta)
  size_t total_size = 0;

  if (has_correlation_id()) {
    // required uint64 correlation_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlation_id());
  }

  if (has_method_type()) {
    // required .tinyRPC.rpc.MethodType method_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method_type());
  }

  return total_size;
}
size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tinyRPC.rpc.RpcMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000014) ^ 0x00000014) == 0) {  // All required fields are present.
    // required uint64 correlation_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->correlation_id());

    // required .tinyRPC.rpc.MethodType method_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
    if (has_request_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_meta_);
    }

    // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
    if (has_response_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_meta_);
    }

  }
  // optional uint64 flags = 8;
  if (has_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->flags());
  }

  if (_has_bits_[0 / 32] & 96u) {
    // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
    if (has_compression_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression_algorithm());
    }

    // optional bool attachment_compressed = 10;
    if (has_attachment_compressed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tinyRPC.rpc.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tinyRPC.rpc.RpcMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tinyRPC.rpc.RpcMeta)
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tinyRPC.rpc.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_request_meta()->::tinyRPC::rpc::RpcRequestMeta::MergeFrom(from.request_meta());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_response_meta()->::tinyRPC::rpc::RpcResponseMeta::MergeFrom(from.response_meta());
    }
    if (cached_has_bits & 0x00000004u) {
      correlation_id_ = from.correlation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      method_type_ = from.method_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      compression_algorithm_ = from.compression_algorithm_;
    }
    if (cached_has_bits & 0x00000040u) {
      attachment_compressed_ = from.attachment_compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tinyRPC.rpc.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinyRPC.rpc.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000014) != 0x00000014) return false;
  if (has_request_meta()) {
    if (!this->request_meta_->IsInitialized()) return false;
  }
  if (has_response_meta()) {
    if (!this->response_meta_->IsInitialized()) return false;
  }
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  swap(request_meta_, other->request_meta_);
  swap(response_meta_, other->response_meta_);
  swap(correlation_id_, other->correlation_id_);
  swap(flags_, other->flags_);
  swap(method_type_, other->method_type_);
  swap(compression_algorithm_, other->compression_algorithm_);
  swap(attachment_compressed_, other->attachment_compressed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcMeta::GetMetadata() const {
  protobuf_rpc_5fmeta_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_5fmeta_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RpcMeta

// required uint64 correlation_id = 1;
bool RpcMeta::has_correlation_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RpcMeta::set_has_correlation_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RpcMeta::clear_has_correlation_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RpcMeta::clear_correlation_id() {
  correlation_id_ = GOOGLE_ULONGLONG(0);
  clear_has_correlation_id();
}
::google::protobuf::uint64 RpcMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.correlation_id)
  return correlation_id_;
}
void RpcMeta::set_correlation_id(::google::protobuf::uint64 value) {
  set_has_correlation_id();
  correlation_id_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.correlation_id)
}

// required .tinyRPC.rpc.MethodType method_type = 7;
bool RpcMeta::has_method_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RpcMeta::set_has_method_type() {
  _has_bits_[0] |= 0x00000010u;
}
void RpcMeta::clear_has_method_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void RpcMeta::clear_method_type() {
  method_type_ = 0;
  clear_has_method_type();
}
::tinyRPC::rpc::MethodType RpcMeta::method_type() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.method_type)
  return static_cast< ::tinyRPC::rpc::MethodType >(method_type_);
}
void RpcMeta::set_method_type(::tinyRPC::rpc::MethodType value) {
  assert(::tinyRPC::rpc::MethodType_IsValid(value));
  set_has_method_type();
  method_type_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.method_type)
}

// optional uint64 flags = 8;
bool RpcMeta::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RpcMeta::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void RpcMeta::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void RpcMeta::clear_flags() {
  flags_ = GOOGLE_ULONGLONG(0);
  clear_has_flags();
}
::google::protobuf::uint64 RpcMeta::flags() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.flags)
  return flags_;
}
void RpcMeta::set_flags(::google::protobuf::uint64 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.flags)
}

// optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
bool RpcMeta::has_compression_algorithm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RpcMeta::set_has_compression_algorithm() {
  _has_bits_[0] |= 0x00000020u;
}
void RpcMeta::clear_has_compression_algorithm() {
  _has_bits_[0] &= ~0x00000020u;
}
void RpcMeta::clear_compression_algorithm() {
  compression_algorithm_ = 0;
  clear_has_compression_algorithm();
}
::tinyRPC::rpc::CompressionAlgorithm RpcMeta::compression_algorithm() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.compression_algorithm)
  return static_cast< ::tinyRPC::rpc::CompressionAlgorithm >(compression_algorithm_);
}
void RpcMeta::set_compression_algorithm(::tinyRPC::rpc::CompressionAlgorithm value) {
  assert(::tinyRPC::rpc::CompressionAlgorithm_IsValid(value));
  set_has_compression_algorithm();
  compression_algorithm_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.compression_algorithm)
}

// optional bool attachment_compressed = 10;
bool RpcMeta::has_attachment_compressed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RpcMeta::set_has_attachment_compressed() {
  _has_bits_[0] |= 0x00000040u;
}
void RpcMeta::clear_has_attachment_compressed() {
  _has_bits_[0] &= ~0x00000040u;
}
void RpcMeta::clear_attachment_compressed() {
  attachment_compressed_ = false;
  clear_has_attachment_compressed();
}
bool RpcMeta::attachment_compressed() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.attachment_compressed)
  return attachment_compressed_;
}
void RpcMeta::set_attachment_compressed(bool value) {
  set_has_attachment_compressed();
  attachment_compressed_ = value;
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.attachment_compressed)
}

// optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
bool RpcMeta::has_request_meta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RpcMeta::set_has_request_meta() {
  _has_bits_[0] |= 0x00000001u;
}
void RpcMeta::clear_has_request_meta() {
  _has_bits_[0] &= ~0x00000001u;
}
void RpcMeta::clear_request_meta() {
  if (request_meta_ != NULL) request_meta_->::tinyRPC::rpc::RpcRequestMeta::Clear();
  clear_has_request_meta();
}
const ::tinyRPC::rpc::RpcRequestMeta& RpcMeta::request_meta() const {
  const ::tinyRPC::rpc::RpcRequestMeta* p = request_meta_;
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.request_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::tinyRPC::rpc::RpcRequestMeta*>(
      &::tinyRPC::rpc::_RpcRequestMeta_default_instance_);
}
::tinyRPC::rpc::RpcRequestMeta* RpcMeta::mutable_request_meta() {
  set_has_request_meta();
  if (request_meta_ == NULL) {
    request_meta_ = new ::tinyRPC::rpc::RpcRequestMeta;
  }
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcMeta.request_meta)
  return request_meta_;
}
::tinyRPC::rpc::RpcRequestMeta* RpcMeta::release_request_meta() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcMeta.request_meta)
  clear_has_request_meta();
  ::tinyRPC::rpc::RpcRequestMeta* temp = request_meta_;
  request_meta_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_request_meta(::tinyRPC::rpc::RpcRequestMeta* request_meta) {
  delete request_meta_;
  request_meta_ = request_meta;
  if (request_meta) {
    set_has_request_meta();
  } else {
    clear_has_request_meta();
  }
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcMeta.request_meta)
}

// optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
bool RpcMeta::has_response_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RpcMeta::set_has_response_meta() {
  _has_bits_[0] |= 0x00000002u;
}
void RpcMeta::clear_has_response_meta() {
  _has_bits_[0] &= ~0x00000002u;
}
void RpcMeta::clear_response_meta() {
  if (response_meta_ != NULL) response_meta_->::tinyRPC::rpc::RpcResponseMeta::Clear();
  clear_has_response_meta();
}
const ::tinyRPC::rpc::RpcResponseMeta& RpcMeta::response_meta() const {
  const ::tinyRPC::rpc::RpcResponseMeta* p = response_meta_;
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.response_meta)
  return p != NULL ? *p : *reinterpret_cast<const ::tinyRPC::rpc::RpcResponseMeta*>(
      &::tinyRPC::rpc::_RpcResponseMeta_default_instance_);
}
::tinyRPC::rpc::RpcResponseMeta* RpcMeta::mutable_response_meta() {
  set_has_response_meta();
  if (response_meta_ == NULL) {
    response_meta_ = new ::tinyRPC::rpc::RpcResponseMeta;
  }
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcMeta.response_meta)
  return response_meta_;
}
::tinyRPC::rpc::RpcResponseMeta* RpcMeta::release_response_meta() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcMeta.response_meta)
  clear_has_response_meta();
  ::tinyRPC::rpc::RpcResponseMeta* temp = response_meta_;
  response_meta_ = NULL;
  return temp;
}
void RpcMeta::set_allocated_response_meta(::tinyRPC::rpc::RpcResponseMeta* response_meta) {
  delete response_meta_;
  response_meta_ = response_meta;
  if (response_meta) {
    set_has_response_meta();
  } else {
    clear_has_response_meta();
  }
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcMeta.response_meta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace tinyRPC

// @@protoc_insertion_point(global_scope)
