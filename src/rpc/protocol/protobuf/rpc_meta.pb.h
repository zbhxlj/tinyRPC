// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fmeta_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fmeta_2eproto;
namespace tinyRPC {
namespace rpc {
class RpcMeta;
struct RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
class RpcRequestMeta;
struct RpcRequestMetaDefaultTypeInternal;
extern RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
class RpcResponseMeta;
struct RpcResponseMetaDefaultTypeInternal;
extern RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
}  // namespace rpc
}  // namespace tinyRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::tinyRPC::rpc::RpcMeta* Arena::CreateMaybeMessage<::tinyRPC::rpc::RpcMeta>(Arena*);
template<> ::tinyRPC::rpc::RpcRequestMeta* Arena::CreateMaybeMessage<::tinyRPC::rpc::RpcRequestMeta>(Arena*);
template<> ::tinyRPC::rpc::RpcResponseMeta* Arena::CreateMaybeMessage<::tinyRPC::rpc::RpcResponseMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tinyRPC {
namespace rpc {

enum Status : int {
  STATUS_SUCCESS = 0,
  STATUS_CHANNEL_SHUTDOWN = 1,
  STATUS_FAIL_TO_CONNECT = 2,
  STATUS_SERIALIZE_REQUEST = 4,
  STATUS_PARSE_REQUEST = 5,
  STATUS_SERIALIZE_RESPONSE = 6,
  STATUS_PARSE_RESPONSE = 7,
  STATUS_INVALID_METHOD_NAME = 8,
  STATUS_INVALID_TRANSFER_MODE = 12,
  STATUS_FROM_USER_FEEDBACK = 13,
  STATUS_OUT_OF_SERVICE = 14,
  STATUS_GET_ROUTE = 15,
  STATUS_GET_ROUTE_ALL_DISABLED = 17,
  STATUS_FROM_USER = 100,
  STATUS_TIMEOUT = 3,
  STATUS_OVERLOADED = 11,
  STATUS_SERVICE_NOT_FOUND = 9,
  STATUS_METHOD_NOT_FOUND = 10,
  STATUS_NO_PEER = 16,
  STATUS_FAILED = 99,
  STATUS_NOT_SUPPORTED = 101,
  STATUS_MALFORMED_DATA = 102,
  STATUS_INVALID_CHANNEL = 103,
  STATUS_IO_ERROR = 104,
  STATUS_RESERVED_MAX = 1000
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = STATUS_SUCCESS;
constexpr Status Status_MAX = STATUS_RESERVED_MAX;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum MethodType : int {
  METHOD_TYPE_UNKNOWN = 0,
  METHOD_TYPE_SINGLE = 1,
  METHOD_TYPE_STREAM = 2
};
bool MethodType_IsValid(int value);
constexpr MethodType MethodType_MIN = METHOD_TYPE_UNKNOWN;
constexpr MethodType MethodType_MAX = METHOD_TYPE_STREAM;
constexpr int MethodType_ARRAYSIZE = MethodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MethodType_descriptor();
template<typename T>
inline const std::string& MethodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MethodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MethodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MethodType_descriptor(), enum_t_value);
}
inline bool MethodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MethodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MethodType>(
    MethodType_descriptor(), name, value);
}
enum MessageFlags : int {
  MESSAGE_FLAGS_UNKNOWN = 0,
  MESSAGE_FLAGS_START_OF_STREAM = 1,
  MESSAGE_FLAGS_END_OF_STREAM = 2,
  MESSAGE_FLAGS_NO_PAYLOAD = 4
};
bool MessageFlags_IsValid(int value);
constexpr MessageFlags MessageFlags_MIN = MESSAGE_FLAGS_UNKNOWN;
constexpr MessageFlags MessageFlags_MAX = MESSAGE_FLAGS_NO_PAYLOAD;
constexpr int MessageFlags_ARRAYSIZE = MessageFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageFlags_descriptor();
template<typename T>
inline const std::string& MessageFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageFlags_descriptor(), enum_t_value);
}
inline bool MessageFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageFlags>(
    MessageFlags_descriptor(), name, value);
}
enum CompressionAlgorithm : int {
  COMPRESSION_ALGORITHM_UNKNOWN = 0,
  COMPRESSION_ALGORITHM_NONE = 1,
  COMPRESSION_ALGORITHM_GZIP = 2,
  COMPRESSION_ALGORITHM_LZ4_FRAME = 3,
  COMPRESSION_ALGORITHM_SNAPPY = 4,
  COMPRESSION_ALGORITHM_ZSTD = 5
};
bool CompressionAlgorithm_IsValid(int value);
constexpr CompressionAlgorithm CompressionAlgorithm_MIN = COMPRESSION_ALGORITHM_UNKNOWN;
constexpr CompressionAlgorithm CompressionAlgorithm_MAX = COMPRESSION_ALGORITHM_ZSTD;
constexpr int CompressionAlgorithm_ARRAYSIZE = CompressionAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionAlgorithm_descriptor();
template<typename T>
inline const std::string& CompressionAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompressionAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompressionAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompressionAlgorithm_descriptor(), enum_t_value);
}
inline bool CompressionAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompressionAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompressionAlgorithm>(
    CompressionAlgorithm_descriptor(), name, value);
}
// ===================================================================

class RpcRequestMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinyRPC.rpc.RpcRequestMeta) */ {
 public:
  inline RpcRequestMeta() : RpcRequestMeta(nullptr) {}
  ~RpcRequestMeta() override;
  explicit PROTOBUF_CONSTEXPR RpcRequestMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcRequestMeta(const RpcRequestMeta& from);
  RpcRequestMeta(RpcRequestMeta&& from) noexcept
    : RpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline RpcRequestMeta& operator=(const RpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequestMeta& operator=(RpcRequestMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcRequestMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const RpcRequestMeta*>(
               &_RpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcRequestMeta& a, RpcRequestMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcRequestMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcRequestMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcRequestMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcRequestMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcRequestMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcRequestMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinyRPC.rpc.RpcRequestMeta";
  }
  protected:
  explicit RpcRequestMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 2,
    kTracingContextFieldNumber = 5,
    kRequestIdFieldNumber = 3,
    kTimeoutFieldNumber = 4,
    kAcceptableCompressionAlgorithmsFieldNumber = 6,
  };
  // required string method_name = 2;
  bool has_method_name() const;
  private:
  bool _internal_has_method_name() const;
  public:
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // optional bytes tracing_context = 5;
  bool has_tracing_context() const;
  private:
  bool _internal_has_tracing_context() const;
  public:
  void clear_tracing_context();
  const std::string& tracing_context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tracing_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tracing_context();
  PROTOBUF_NODISCARD std::string* release_tracing_context();
  void set_allocated_tracing_context(std::string* tracing_context);
  private:
  const std::string& _internal_tracing_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracing_context(const std::string& value);
  std::string* _internal_mutable_tracing_context();
  public:

  // optional uint32 request_id = 3;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint32_t request_id() const;
  void set_request_id(uint32_t value);
  private:
  uint32_t _internal_request_id() const;
  void _internal_set_request_id(uint32_t value);
  public:

  // optional uint32 timeout = 4;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // optional uint64 acceptable_compression_algorithms = 6;
  bool has_acceptable_compression_algorithms() const;
  private:
  bool _internal_has_acceptable_compression_algorithms() const;
  public:
  void clear_acceptable_compression_algorithms();
  uint64_t acceptable_compression_algorithms() const;
  void set_acceptable_compression_algorithms(uint64_t value);
  private:
  uint64_t _internal_acceptable_compression_algorithms() const;
  void _internal_set_acceptable_compression_algorithms(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tinyRPC.rpc.RpcRequestMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracing_context_;
  uint32_t request_id_;
  uint32_t timeout_;
  uint64_t acceptable_compression_algorithms_;
  friend struct ::TableStruct_rpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RpcResponseMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinyRPC.rpc.RpcResponseMeta) */ {
 public:
  inline RpcResponseMeta() : RpcResponseMeta(nullptr) {}
  ~RpcResponseMeta() override;
  explicit PROTOBUF_CONSTEXPR RpcResponseMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcResponseMeta(const RpcResponseMeta& from);
  RpcResponseMeta(RpcResponseMeta&& from) noexcept
    : RpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline RpcResponseMeta& operator=(const RpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponseMeta& operator=(RpcResponseMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcResponseMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const RpcResponseMeta*>(
               &_RpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcResponseMeta& a, RpcResponseMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcResponseMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcResponseMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcResponseMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcResponseMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcResponseMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcResponseMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponseMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinyRPC.rpc.RpcResponseMeta";
  }
  protected:
  explicit RpcResponseMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kStatusFieldNumber = 1,
    kTraceForciblySampledFieldNumber = 3,
  };
  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required int32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // optional bool trace_forcibly_sampled = 3;
  bool has_trace_forcibly_sampled() const;
  private:
  bool _internal_has_trace_forcibly_sampled() const;
  public:
  void clear_trace_forcibly_sampled();
  bool trace_forcibly_sampled() const;
  void set_trace_forcibly_sampled(bool value);
  private:
  bool _internal_trace_forcibly_sampled() const;
  void _internal_set_trace_forcibly_sampled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tinyRPC.rpc.RpcResponseMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int32_t status_;
  bool trace_forcibly_sampled_;
  friend struct ::TableStruct_rpc_5fmeta_2eproto;
};
// -------------------------------------------------------------------

class RpcMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinyRPC.rpc.RpcMeta) */ {
 public:
  inline RpcMeta() : RpcMeta(nullptr) {}
  ~RpcMeta() override;
  explicit PROTOBUF_CONSTEXPR RpcMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMeta(const RpcMeta& from);
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RpcMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinyRPC.rpc.RpcMeta";
  }
  protected:
  explicit RpcMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestMetaFieldNumber = 5,
    kResponseMetaFieldNumber = 6,
    kCorrelationIdFieldNumber = 1,
    kFlagsFieldNumber = 8,
    kMethodTypeFieldNumber = 7,
    kCompressionAlgorithmFieldNumber = 9,
    kAttachmentCompressedFieldNumber = 10,
  };
  // optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
  bool has_request_meta() const;
  private:
  bool _internal_has_request_meta() const;
  public:
  void clear_request_meta();
  const ::tinyRPC::rpc::RpcRequestMeta& request_meta() const;
  PROTOBUF_NODISCARD ::tinyRPC::rpc::RpcRequestMeta* release_request_meta();
  ::tinyRPC::rpc::RpcRequestMeta* mutable_request_meta();
  void set_allocated_request_meta(::tinyRPC::rpc::RpcRequestMeta* request_meta);
  private:
  const ::tinyRPC::rpc::RpcRequestMeta& _internal_request_meta() const;
  ::tinyRPC::rpc::RpcRequestMeta* _internal_mutable_request_meta();
  public:
  void unsafe_arena_set_allocated_request_meta(
      ::tinyRPC::rpc::RpcRequestMeta* request_meta);
  ::tinyRPC::rpc::RpcRequestMeta* unsafe_arena_release_request_meta();

  // optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
  bool has_response_meta() const;
  private:
  bool _internal_has_response_meta() const;
  public:
  void clear_response_meta();
  const ::tinyRPC::rpc::RpcResponseMeta& response_meta() const;
  PROTOBUF_NODISCARD ::tinyRPC::rpc::RpcResponseMeta* release_response_meta();
  ::tinyRPC::rpc::RpcResponseMeta* mutable_response_meta();
  void set_allocated_response_meta(::tinyRPC::rpc::RpcResponseMeta* response_meta);
  private:
  const ::tinyRPC::rpc::RpcResponseMeta& _internal_response_meta() const;
  ::tinyRPC::rpc::RpcResponseMeta* _internal_mutable_response_meta();
  public:
  void unsafe_arena_set_allocated_response_meta(
      ::tinyRPC::rpc::RpcResponseMeta* response_meta);
  ::tinyRPC::rpc::RpcResponseMeta* unsafe_arena_release_response_meta();

  // required uint64 correlation_id = 1;
  bool has_correlation_id() const;
  private:
  bool _internal_has_correlation_id() const;
  public:
  void clear_correlation_id();
  uint64_t correlation_id() const;
  void set_correlation_id(uint64_t value);
  private:
  uint64_t _internal_correlation_id() const;
  void _internal_set_correlation_id(uint64_t value);
  public:

  // optional uint64 flags = 8;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  uint64_t flags() const;
  void set_flags(uint64_t value);
  private:
  uint64_t _internal_flags() const;
  void _internal_set_flags(uint64_t value);
  public:

  // required .tinyRPC.rpc.MethodType method_type = 7;
  bool has_method_type() const;
  private:
  bool _internal_has_method_type() const;
  public:
  void clear_method_type();
  ::tinyRPC::rpc::MethodType method_type() const;
  void set_method_type(::tinyRPC::rpc::MethodType value);
  private:
  ::tinyRPC::rpc::MethodType _internal_method_type() const;
  void _internal_set_method_type(::tinyRPC::rpc::MethodType value);
  public:

  // optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
  bool has_compression_algorithm() const;
  private:
  bool _internal_has_compression_algorithm() const;
  public:
  void clear_compression_algorithm();
  ::tinyRPC::rpc::CompressionAlgorithm compression_algorithm() const;
  void set_compression_algorithm(::tinyRPC::rpc::CompressionAlgorithm value);
  private:
  ::tinyRPC::rpc::CompressionAlgorithm _internal_compression_algorithm() const;
  void _internal_set_compression_algorithm(::tinyRPC::rpc::CompressionAlgorithm value);
  public:

  // optional bool attachment_compressed = 10;
  bool has_attachment_compressed() const;
  private:
  bool _internal_has_attachment_compressed() const;
  public:
  void clear_attachment_compressed();
  bool attachment_compressed() const;
  void set_attachment_compressed(bool value);
  private:
  bool _internal_attachment_compressed() const;
  void _internal_set_attachment_compressed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tinyRPC.rpc.RpcMeta)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tinyRPC::rpc::RpcRequestMeta* request_meta_;
  ::tinyRPC::rpc::RpcResponseMeta* response_meta_;
  uint64_t correlation_id_;
  uint64_t flags_;
  int method_type_;
  int compression_algorithm_;
  bool attachment_compressed_;
  friend struct ::TableStruct_rpc_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcRequestMeta

// required string method_name = 2;
inline bool RpcRequestMeta::_internal_has_method_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_method_name() const {
  return _internal_has_method_name();
}
inline void RpcRequestMeta::clear_method_name() {
  method_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcRequestMeta::method_name() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestMeta::set_method_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.method_name)
}
inline std::string* RpcRequestMeta::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcRequestMeta.method_name)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_method_name() const {
  return method_name_.Get();
}
inline void RpcRequestMeta::_internal_set_method_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::_internal_mutable_method_name() {
  _has_bits_[0] |= 0x00000001u;
  return method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::release_method_name() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcRequestMeta.method_name)
  if (!_internal_has_method_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = method_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_name_.IsDefault()) {
    method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcRequestMeta::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_name_.IsDefault()) {
    method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcRequestMeta.method_name)
}

// optional uint32 request_id = 3;
inline bool RpcRequestMeta::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_request_id() const {
  return _internal_has_request_id();
}
inline void RpcRequestMeta::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t RpcRequestMeta::_internal_request_id() const {
  return request_id_;
}
inline uint32_t RpcRequestMeta::request_id() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.request_id)
  return _internal_request_id();
}
inline void RpcRequestMeta::_internal_set_request_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  request_id_ = value;
}
inline void RpcRequestMeta::set_request_id(uint32_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.request_id)
}

// optional uint32 timeout = 4;
inline bool RpcRequestMeta::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_timeout() const {
  return _internal_has_timeout();
}
inline void RpcRequestMeta::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t RpcRequestMeta::_internal_timeout() const {
  return timeout_;
}
inline uint32_t RpcRequestMeta::timeout() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.timeout)
  return _internal_timeout();
}
inline void RpcRequestMeta::_internal_set_timeout(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  timeout_ = value;
}
inline void RpcRequestMeta::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.timeout)
}

// optional bytes tracing_context = 5;
inline bool RpcRequestMeta::_internal_has_tracing_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_tracing_context() const {
  return _internal_has_tracing_context();
}
inline void RpcRequestMeta::clear_tracing_context() {
  tracing_context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcRequestMeta::tracing_context() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.tracing_context)
  return _internal_tracing_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcRequestMeta::set_tracing_context(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tracing_context_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.tracing_context)
}
inline std::string* RpcRequestMeta::mutable_tracing_context() {
  std::string* _s = _internal_mutable_tracing_context();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcRequestMeta.tracing_context)
  return _s;
}
inline const std::string& RpcRequestMeta::_internal_tracing_context() const {
  return tracing_context_.Get();
}
inline void RpcRequestMeta::_internal_set_tracing_context(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tracing_context_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::_internal_mutable_tracing_context() {
  _has_bits_[0] |= 0x00000002u;
  return tracing_context_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcRequestMeta::release_tracing_context() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcRequestMeta.tracing_context)
  if (!_internal_has_tracing_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = tracing_context_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tracing_context_.IsDefault()) {
    tracing_context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcRequestMeta::set_allocated_tracing_context(std::string* tracing_context) {
  if (tracing_context != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tracing_context_.SetAllocated(tracing_context, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tracing_context_.IsDefault()) {
    tracing_context_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcRequestMeta.tracing_context)
}

// optional uint64 acceptable_compression_algorithms = 6;
inline bool RpcRequestMeta::_internal_has_acceptable_compression_algorithms() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RpcRequestMeta::has_acceptable_compression_algorithms() const {
  return _internal_has_acceptable_compression_algorithms();
}
inline void RpcRequestMeta::clear_acceptable_compression_algorithms() {
  acceptable_compression_algorithms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t RpcRequestMeta::_internal_acceptable_compression_algorithms() const {
  return acceptable_compression_algorithms_;
}
inline uint64_t RpcRequestMeta::acceptable_compression_algorithms() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcRequestMeta.acceptable_compression_algorithms)
  return _internal_acceptable_compression_algorithms();
}
inline void RpcRequestMeta::_internal_set_acceptable_compression_algorithms(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  acceptable_compression_algorithms_ = value;
}
inline void RpcRequestMeta::set_acceptable_compression_algorithms(uint64_t value) {
  _internal_set_acceptable_compression_algorithms(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcRequestMeta.acceptable_compression_algorithms)
}

// -------------------------------------------------------------------

// RpcResponseMeta

// required int32 status = 1;
inline bool RpcResponseMeta::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcResponseMeta::has_status() const {
  return _internal_has_status();
}
inline void RpcResponseMeta::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t RpcResponseMeta::_internal_status() const {
  return status_;
}
inline int32_t RpcResponseMeta::status() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcResponseMeta.status)
  return _internal_status();
}
inline void RpcResponseMeta::_internal_set_status(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void RpcResponseMeta::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcResponseMeta.status)
}

// optional string description = 2;
inline bool RpcResponseMeta::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcResponseMeta::has_description() const {
  return _internal_has_description();
}
inline void RpcResponseMeta::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcResponseMeta::description() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcResponseMeta.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcResponseMeta::set_description(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcResponseMeta.description)
}
inline std::string* RpcResponseMeta::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcResponseMeta.description)
  return _s;
}
inline const std::string& RpcResponseMeta::_internal_description() const {
  return description_.Get();
}
inline void RpcResponseMeta::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcResponseMeta::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcResponseMeta::release_description() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcResponseMeta.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcResponseMeta::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcResponseMeta.description)
}

// optional bool trace_forcibly_sampled = 3;
inline bool RpcResponseMeta::_internal_has_trace_forcibly_sampled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcResponseMeta::has_trace_forcibly_sampled() const {
  return _internal_has_trace_forcibly_sampled();
}
inline void RpcResponseMeta::clear_trace_forcibly_sampled() {
  trace_forcibly_sampled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool RpcResponseMeta::_internal_trace_forcibly_sampled() const {
  return trace_forcibly_sampled_;
}
inline bool RpcResponseMeta::trace_forcibly_sampled() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcResponseMeta.trace_forcibly_sampled)
  return _internal_trace_forcibly_sampled();
}
inline void RpcResponseMeta::_internal_set_trace_forcibly_sampled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  trace_forcibly_sampled_ = value;
}
inline void RpcResponseMeta::set_trace_forcibly_sampled(bool value) {
  _internal_set_trace_forcibly_sampled(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcResponseMeta.trace_forcibly_sampled)
}

// -------------------------------------------------------------------

// RpcMeta

// required uint64 correlation_id = 1;
inline bool RpcMeta::_internal_has_correlation_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcMeta::has_correlation_id() const {
  return _internal_has_correlation_id();
}
inline void RpcMeta::clear_correlation_id() {
  correlation_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline uint64_t RpcMeta::_internal_correlation_id() const {
  return correlation_id_;
}
inline uint64_t RpcMeta::correlation_id() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.correlation_id)
  return _internal_correlation_id();
}
inline void RpcMeta::_internal_set_correlation_id(uint64_t value) {
  _has_bits_[0] |= 0x00000004u;
  correlation_id_ = value;
}
inline void RpcMeta::set_correlation_id(uint64_t value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.correlation_id)
}

// required .tinyRPC.rpc.MethodType method_type = 7;
inline bool RpcMeta::_internal_has_method_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RpcMeta::has_method_type() const {
  return _internal_has_method_type();
}
inline void RpcMeta::clear_method_type() {
  method_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::tinyRPC::rpc::MethodType RpcMeta::_internal_method_type() const {
  return static_cast< ::tinyRPC::rpc::MethodType >(method_type_);
}
inline ::tinyRPC::rpc::MethodType RpcMeta::method_type() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.method_type)
  return _internal_method_type();
}
inline void RpcMeta::_internal_set_method_type(::tinyRPC::rpc::MethodType value) {
  assert(::tinyRPC::rpc::MethodType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  method_type_ = value;
}
inline void RpcMeta::set_method_type(::tinyRPC::rpc::MethodType value) {
  _internal_set_method_type(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.method_type)
}

// optional uint64 flags = 8;
inline bool RpcMeta::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcMeta::has_flags() const {
  return _internal_has_flags();
}
inline void RpcMeta::clear_flags() {
  flags_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline uint64_t RpcMeta::_internal_flags() const {
  return flags_;
}
inline uint64_t RpcMeta::flags() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.flags)
  return _internal_flags();
}
inline void RpcMeta::_internal_set_flags(uint64_t value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
}
inline void RpcMeta::set_flags(uint64_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.flags)
}

// optional .tinyRPC.rpc.CompressionAlgorithm compression_algorithm = 9;
inline bool RpcMeta::_internal_has_compression_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RpcMeta::has_compression_algorithm() const {
  return _internal_has_compression_algorithm();
}
inline void RpcMeta::clear_compression_algorithm() {
  compression_algorithm_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::tinyRPC::rpc::CompressionAlgorithm RpcMeta::_internal_compression_algorithm() const {
  return static_cast< ::tinyRPC::rpc::CompressionAlgorithm >(compression_algorithm_);
}
inline ::tinyRPC::rpc::CompressionAlgorithm RpcMeta::compression_algorithm() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.compression_algorithm)
  return _internal_compression_algorithm();
}
inline void RpcMeta::_internal_set_compression_algorithm(::tinyRPC::rpc::CompressionAlgorithm value) {
  assert(::tinyRPC::rpc::CompressionAlgorithm_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  compression_algorithm_ = value;
}
inline void RpcMeta::set_compression_algorithm(::tinyRPC::rpc::CompressionAlgorithm value) {
  _internal_set_compression_algorithm(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.compression_algorithm)
}

// optional bool attachment_compressed = 10;
inline bool RpcMeta::_internal_has_attachment_compressed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RpcMeta::has_attachment_compressed() const {
  return _internal_has_attachment_compressed();
}
inline void RpcMeta::clear_attachment_compressed() {
  attachment_compressed_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RpcMeta::_internal_attachment_compressed() const {
  return attachment_compressed_;
}
inline bool RpcMeta::attachment_compressed() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.attachment_compressed)
  return _internal_attachment_compressed();
}
inline void RpcMeta::_internal_set_attachment_compressed(bool value) {
  _has_bits_[0] |= 0x00000040u;
  attachment_compressed_ = value;
}
inline void RpcMeta::set_attachment_compressed(bool value) {
  _internal_set_attachment_compressed(value);
  // @@protoc_insertion_point(field_set:tinyRPC.rpc.RpcMeta.attachment_compressed)
}

// optional .tinyRPC.rpc.RpcRequestMeta request_meta = 5;
inline bool RpcMeta::_internal_has_request_meta() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || request_meta_ != nullptr);
  return value;
}
inline bool RpcMeta::has_request_meta() const {
  return _internal_has_request_meta();
}
inline void RpcMeta::clear_request_meta() {
  if (request_meta_ != nullptr) request_meta_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tinyRPC::rpc::RpcRequestMeta& RpcMeta::_internal_request_meta() const {
  const ::tinyRPC::rpc::RpcRequestMeta* p = request_meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinyRPC::rpc::RpcRequestMeta&>(
      ::tinyRPC::rpc::_RpcRequestMeta_default_instance_);
}
inline const ::tinyRPC::rpc::RpcRequestMeta& RpcMeta::request_meta() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.request_meta)
  return _internal_request_meta();
}
inline void RpcMeta::unsafe_arena_set_allocated_request_meta(
    ::tinyRPC::rpc::RpcRequestMeta* request_meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_meta_);
  }
  request_meta_ = request_meta;
  if (request_meta) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinyRPC.rpc.RpcMeta.request_meta)
}
inline ::tinyRPC::rpc::RpcRequestMeta* RpcMeta::release_request_meta() {
  _has_bits_[0] &= ~0x00000001u;
  ::tinyRPC::rpc::RpcRequestMeta* temp = request_meta_;
  request_meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinyRPC::rpc::RpcRequestMeta* RpcMeta::unsafe_arena_release_request_meta() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcMeta.request_meta)
  _has_bits_[0] &= ~0x00000001u;
  ::tinyRPC::rpc::RpcRequestMeta* temp = request_meta_;
  request_meta_ = nullptr;
  return temp;
}
inline ::tinyRPC::rpc::RpcRequestMeta* RpcMeta::_internal_mutable_request_meta() {
  _has_bits_[0] |= 0x00000001u;
  if (request_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinyRPC::rpc::RpcRequestMeta>(GetArenaForAllocation());
    request_meta_ = p;
  }
  return request_meta_;
}
inline ::tinyRPC::rpc::RpcRequestMeta* RpcMeta::mutable_request_meta() {
  ::tinyRPC::rpc::RpcRequestMeta* _msg = _internal_mutable_request_meta();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcMeta.request_meta)
  return _msg;
}
inline void RpcMeta::set_allocated_request_meta(::tinyRPC::rpc::RpcRequestMeta* request_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_meta_;
  }
  if (request_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request_meta);
    if (message_arena != submessage_arena) {
      request_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_meta_ = request_meta;
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcMeta.request_meta)
}

// optional .tinyRPC.rpc.RpcResponseMeta response_meta = 6;
inline bool RpcMeta::_internal_has_response_meta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || response_meta_ != nullptr);
  return value;
}
inline bool RpcMeta::has_response_meta() const {
  return _internal_has_response_meta();
}
inline void RpcMeta::clear_response_meta() {
  if (response_meta_ != nullptr) response_meta_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tinyRPC::rpc::RpcResponseMeta& RpcMeta::_internal_response_meta() const {
  const ::tinyRPC::rpc::RpcResponseMeta* p = response_meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinyRPC::rpc::RpcResponseMeta&>(
      ::tinyRPC::rpc::_RpcResponseMeta_default_instance_);
}
inline const ::tinyRPC::rpc::RpcResponseMeta& RpcMeta::response_meta() const {
  // @@protoc_insertion_point(field_get:tinyRPC.rpc.RpcMeta.response_meta)
  return _internal_response_meta();
}
inline void RpcMeta::unsafe_arena_set_allocated_response_meta(
    ::tinyRPC::rpc::RpcResponseMeta* response_meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_meta_);
  }
  response_meta_ = response_meta;
  if (response_meta) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinyRPC.rpc.RpcMeta.response_meta)
}
inline ::tinyRPC::rpc::RpcResponseMeta* RpcMeta::release_response_meta() {
  _has_bits_[0] &= ~0x00000002u;
  ::tinyRPC::rpc::RpcResponseMeta* temp = response_meta_;
  response_meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tinyRPC::rpc::RpcResponseMeta* RpcMeta::unsafe_arena_release_response_meta() {
  // @@protoc_insertion_point(field_release:tinyRPC.rpc.RpcMeta.response_meta)
  _has_bits_[0] &= ~0x00000002u;
  ::tinyRPC::rpc::RpcResponseMeta* temp = response_meta_;
  response_meta_ = nullptr;
  return temp;
}
inline ::tinyRPC::rpc::RpcResponseMeta* RpcMeta::_internal_mutable_response_meta() {
  _has_bits_[0] |= 0x00000002u;
  if (response_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinyRPC::rpc::RpcResponseMeta>(GetArenaForAllocation());
    response_meta_ = p;
  }
  return response_meta_;
}
inline ::tinyRPC::rpc::RpcResponseMeta* RpcMeta::mutable_response_meta() {
  ::tinyRPC::rpc::RpcResponseMeta* _msg = _internal_mutable_response_meta();
  // @@protoc_insertion_point(field_mutable:tinyRPC.rpc.RpcMeta.response_meta)
  return _msg;
}
inline void RpcMeta::set_allocated_response_meta(::tinyRPC::rpc::RpcResponseMeta* response_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_meta_;
  }
  if (response_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response_meta);
    if (message_arena != submessage_arena) {
      response_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  response_meta_ = response_meta;
  // @@protoc_insertion_point(field_set_allocated:tinyRPC.rpc.RpcMeta.response_meta)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace tinyRPC

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tinyRPC::rpc::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinyRPC::rpc::Status>() {
  return ::tinyRPC::rpc::Status_descriptor();
}
template <> struct is_proto_enum< ::tinyRPC::rpc::MethodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinyRPC::rpc::MethodType>() {
  return ::tinyRPC::rpc::MethodType_descriptor();
}
template <> struct is_proto_enum< ::tinyRPC::rpc::MessageFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinyRPC::rpc::MessageFlags>() {
  return ::tinyRPC::rpc::MessageFlags_descriptor();
}
template <> struct is_proto_enum< ::tinyRPC::rpc::CompressionAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinyRPC::rpc::CompressionAlgorithm>() {
  return ::tinyRPC::rpc::CompressionAlgorithm_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fmeta_2eproto
