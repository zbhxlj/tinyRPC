syntax = "proto2";

package flare;

import "google/protobuf/descriptor.proto";

extend google.protobuf.MethodOptions {
  // `11001` is reserved internally.

  // If set, the request is not parsed by the framework, instead, its serialized
  // form is passed to the service implementation via `GetRequestRawBytes()` of
  // `RpcServerController`. You normally shouldn't use this. However, in
  // scenarios where performance really matters, and you simply forward the
  // request to someone else, this can boost your performance.
  //
  // bool accept_request_raw_bytes = 10002;  // TODO(luobogao): Implement it.

  // TODO(luobogao): Not implemented yet.
  //
  // @sa: `common/rpc/rpc_options.proto`.
  //
  // CompressionType request_compression_type = ...
  // CompressionType response_compression_type = ...

  // For methods decorated with this option, if the request has been queued for
  // so many milliseconds before it has a chance to be processed, it's rejected
  // with `STATUS_OVERLOADED`, without notifying the service implementation.
  //
  // CAUTION: THIS CHECK IS DONE **AFTER** REQUEST HAS BEEN FULLY PARSED. For
  // methods with a large request, a significant time (and CPU cycles) may have
  // already been used prior to this check.
  //
  // Note that requests can also be rejected if one of the following conditions
  // holds:
  //
  // - `flare::Server::Options::max_queueing_delay` is specified and the request
  //   has been delayed for that long.
  //
  // - Timeout specified by the client is passed to us and the request has
  //   already timed out.
  optional int32 max_queueing_delay_ms = 11003;

  // Per method concurrent-request-count limit.
  optional int32 max_ongoing_requests = 11004;
}
